#  completion                               -*- shell-script -*-

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! openapi-generator (https://openapi-generator.tech)
# ! FROM OPENAPI SPECIFICATION IN JSON.
# !
# ! Generator version: 7.9.0
# !
# !
# ! System wide installation:
# !
# ! $ sudo cp .bash-completion /etc/bash-completion.d/
# !
# !
# ! User home installation (add this line to .bash_profile):
# !
# ! [ -r ~/.bash-completion ] && source ~/.bash-completion
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


#
# Check if this is OSX, if so defined custom init_completion
#
if [[ `uname` =~ "Darwin" ]]; then
    __osx_init_completion()
    {
        COMPREPLY=()
        _get_comp_words_by_ref cur prev words cword
    }
fi

_()
{
    local cur
    local prev
    local words
    local cword

    # The reference of currently selected REST operation
    local operation=""

    # The list of available operation in the REST service
    # It's modelled as an associative array for efficient key lookup
    declare -A operations
    operations["createAdeIntegration"]=1
    operations["deleteAdeIntegration"]=1
    operations["downloadAdePublicKey"]=1
    operations["getAdeDevice"]=1
    operations["getAdeIntegration"]=1
    operations["listAdeDevices"]=1
    operations["listAdeIntegrations"]=1
    operations["listDevicesAssociatedToAdeToken"]=1
    operations["renewAdeIntegration"]=1
    operations["updateAdeDevice"]=1
    operations["updateAdeIntegration"]=1
    operations["assignLibraryItem"]=1
    operations["createBlueprint"]=1
    operations["deleteBlueprint"]=1
    operations["getBlueprint"]=1
    operations["getBlueprintTemplates"]=1
    operations["getManualEnrollmentProfile"]=1
    operations["listBlueprints"]=1
    operations["listLibraryItems"]=1
    operations["removeLibraryItem"]=1
    operations["updateBlueprint"]=1
    operations["createCustomApp"]=1
    operations["deleteCustomApp"]=1
    operations["getCustomApp"]=1
    operations["listCustomApps"]=1
    operations["updateCustomApp"]=1
    operations["uploadCustomApp"]=1
    operations["createCustomProfile"]=1
    operations["deleteCustomProfile"]=1
    operations["getCustomProfile"]=1
    operations["listCustomProfiles"]=1
    operations["updateCustomProfile"]=1
    operations["createCustomScript"]=1
    operations["deleteCustomScript"]=1
    operations["getCustomScript"]=1
    operations["listCustomScripts"]=1
    operations["updateCustomScript"]=1
    operations["clearPasscode"]=1
    operations["deleteDevice"]=1
    operations["deleteUser"]=1
    operations["eraseDevice"]=1
    operations["getDeviceCommands"]=1
    operations["lockDevice"]=1
    operations["reinstallAgent"]=1
    operations["remoteDesktop"]=1
    operations["renewMdmProfile"]=1
    operations["restartDevice"]=1
    operations["sendBlankpush"]=1
    operations["setName"]=1
    operations["shutdown"]=1
    operations["unlockAccount"]=1
    operations["updateInventory"]=1
    operations["cancelLostMode"]=1
    operations["getDeviceActivity"]=1
    operations["getDeviceApps"]=1
    operations["getDeviceDetails"]=1
    operations["getDeviceLibraryItems"]=1
    operations["getDeviceLostModeDetails"]=1
    operations["getDeviceParameters"]=1
    operations["getDeviceStatus"]=1
    operations["listDevices"]=1
    operations["getActivationLockBypassCode"]=1
    operations["getFilevaultRecoveryKey"]=1
    operations["getRecoveryLockPassword"]=1
    operations["getUnlockPin"]=1
    operations["getLibraryItemActivity"]=1
    operations["getLibraryItemStatuses"]=1
    operations["disableLostMode"]=1
    operations["enableLostMode"]=1
    operations["playLostModeSound"]=1
    operations["updateLocation"]=1
    operations["createDeviceNote"]=1
    operations["deleteDeviceNote"]=1
    operations["getDeviceNotes"]=1
    operations["retrieveDeviceNote"]=1
    operations["updateDeviceNote"]=1
    operations["activationLock"]=1
    operations["applicationFirewall"]=1
    operations["applications"]=1
    operations["certificates"]=1
    operations["count"]=1
    operations["desktopAndScreensaver"]=1
    operations["deviceInformation"]=1
    operations["filevault"]=1
    operations["gatekeeperAndXprotect"]=1
    operations["getCategoryExport"]=1
    operations["installedProfiles"]=1
    operations["kernelExtensions"]=1
    operations["launchAgentsAndDaemons"]=1
    operations["localUsers"]=1
    operations["requestCategoryExport"]=1
    operations["startupSettings"]=1
    operations["systemExtensions"]=1
    operations["transparencyDatabase"]=1
    operations["listSelfServiceCategories"]=1
    operations["licensing"]=1
    operations["createTag"]=1
    operations["deleteTag"]=1
    operations["getTags"]=1
    operations["updateTag"]=1
    operations["getThreatDetails"]=1
    operations["getUser"]=1
    operations["listUsers"]=1

    # An associative array of operations to their parameters
    # Only include path, query and header parameters
    declare -A operation_parameters
    operation_parameters["createAdeIntegration"]=""
    operation_parameters["deleteAdeIntegration"]="ade_token_id= "
    operation_parameters["downloadAdePublicKey"]=""
    operation_parameters["getAdeDevice"]="device_id= "
    operation_parameters["getAdeIntegration"]="ade_token_id= "
    operation_parameters["listAdeDevices"]="blueprint_id= user_id= dep_account= device_family= model= os= profile_status= serial_number= page= "
    operation_parameters["listAdeIntegrations"]=""
    operation_parameters["listDevicesAssociatedToAdeToken"]="ade_token_id= page= "
    operation_parameters["renewAdeIntegration"]="ade_token_id= "
    operation_parameters["updateAdeDevice"]="device_id= "
    operation_parameters["updateAdeIntegration"]="ade_token_id= "
    operation_parameters["assignLibraryItem"]="blueprint_id= "
    operation_parameters["createBlueprint"]=""
    operation_parameters["deleteBlueprint"]="blueprint_id= "
    operation_parameters["getBlueprint"]="blueprint_id= "
    operation_parameters["getBlueprintTemplates"]="limit= offset= "
    operation_parameters["getManualEnrollmentProfile"]="blueprint_id= sso= "
    operation_parameters["listBlueprints"]="id= id__in= name= limit= offset= "
    operation_parameters["listLibraryItems"]="blueprint_id= "
    operation_parameters["removeLibraryItem"]="blueprint_id= "
    operation_parameters["updateBlueprint"]="blueprint_id= "
    operation_parameters["createCustomApp"]=""
    operation_parameters["deleteCustomApp"]="library_item_id= "
    operation_parameters["getCustomApp"]="library_item_id= "
    operation_parameters["listCustomApps"]="page= "
    operation_parameters["updateCustomApp"]="library_item_id= "
    operation_parameters["uploadCustomApp"]=""
    operation_parameters["createCustomProfile"]=""
    operation_parameters["deleteCustomProfile"]="library_item_id= "
    operation_parameters["getCustomProfile"]="library_item_id= "
    operation_parameters["listCustomProfiles"]="page= "
    operation_parameters["updateCustomProfile"]="library_item_id= "
    operation_parameters["createCustomScript"]=""
    operation_parameters["deleteCustomScript"]="library_item_id= "
    operation_parameters["getCustomScript"]="library_item_id= "
    operation_parameters["listCustomScripts"]="page= "
    operation_parameters["updateCustomScript"]="library_item_id= "
    operation_parameters["clearPasscode"]="device_id= "
    operation_parameters["deleteDevice"]="device_id= "
    operation_parameters["deleteUser"]="device_id= "
    operation_parameters["eraseDevice"]="device_id= "
    operation_parameters["getDeviceCommands"]="device_id= limit= offset= "
    operation_parameters["lockDevice"]="device_id= "
    operation_parameters["reinstallAgent"]="device_id= "
    operation_parameters["remoteDesktop"]="device_id= "
    operation_parameters["renewMdmProfile"]="device_id= "
    operation_parameters["restartDevice"]="device_id= "
    operation_parameters["sendBlankpush"]="device_id= "
    operation_parameters["setName"]="device_id= "
    operation_parameters["shutdown"]="device_id= "
    operation_parameters["unlockAccount"]="device_id= "
    operation_parameters["updateInventory"]="device_id= "
    operation_parameters["cancelLostMode"]="device_id= "
    operation_parameters["getDeviceActivity"]="device_id= limit= offset= "
    operation_parameters["getDeviceApps"]="device_id= "
    operation_parameters["getDeviceDetails"]="device_id= "
    operation_parameters["getDeviceLibraryItems"]="device_id= "
    operation_parameters["getDeviceLostModeDetails"]="device_id= "
    operation_parameters["getDeviceParameters"]="device_id= "
    operation_parameters["getDeviceStatus"]="device_id= "
    operation_parameters["listDevices"]="asset_tag= blueprint_id= device_id= device_name= filevault_enabled= mac_address= model= ordering= os_version= platform= serial_number= tag_name= tag_name_in= tag_id= tag_id_in= user= user_email= user_id= user_name= limit= offset= "
    operation_parameters["getActivationLockBypassCode"]="device_id= "
    operation_parameters["getFilevaultRecoveryKey"]="device_id= "
    operation_parameters["getRecoveryLockPassword"]="device_id= "
    operation_parameters["getUnlockPin"]="device_id= "
    operation_parameters["getLibraryItemActivity"]="library_item_id= activity_type= user_id= user_email= limit= offset= "
    operation_parameters["getLibraryItemStatuses"]="library_item_id= computer_id= limit= offset= "
    operation_parameters["disableLostMode"]="device_id= "
    operation_parameters["enableLostMode"]="device_id= "
    operation_parameters["playLostModeSound"]="device_id= "
    operation_parameters["updateLocation"]="device_id= "
    operation_parameters["createDeviceNote"]="device_id= "
    operation_parameters["deleteDeviceNote"]="device_id= note_id= "
    operation_parameters["getDeviceNotes"]="device_id= "
    operation_parameters["retrieveDeviceNote"]="device_id= note_id= "
    operation_parameters["updateDeviceNote"]="device_id= note_id= Authorization: Content-Type: "
    operation_parameters["activationLock"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["applicationFirewall"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["applications"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["certificates"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["count"]="category= "
    operation_parameters["desktopAndScreensaver"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["deviceInformation"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["filevault"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["gatekeeperAndXprotect"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["getCategoryExport"]="export_id= "
    operation_parameters["installedProfiles"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["kernelExtensions"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["launchAgentsAndDaemons"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["localUsers"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["requestCategoryExport"]=""
    operation_parameters["startupSettings"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["systemExtensions"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["transparencyDatabase"]="blueprint_ids= device_families= filter= sort_by= limit= offset= "
    operation_parameters["listSelfServiceCategories"]=""
    operation_parameters["licensing"]=""
    operation_parameters["createTag"]=""
    operation_parameters["deleteTag"]="tag_id= "
    operation_parameters["getTags"]="search= "
    operation_parameters["updateTag"]="tag_id= "
    operation_parameters["getThreatDetails"]="classification= date_range= device_id= status= sort_by= term= limit= offset= "
    operation_parameters["getUser"]="user_id= "
    operation_parameters["listUsers"]="email= id= integration_id= archived= "

    # An associative array of possible values for enum parameters
    declare -A operation_parameters_enum_values

    #
    # Check if this is OSX and use special __osx_init_completion function
    #
    if [[ `uname` =~ "Darwin" ]]; then
        __osx_init_completion || return
    else
        _init_completion -s || return
    fi


    # Check if operation is already in the command line provided
    for word in "${words[@]}"; do
        if [[ -n $word && ${operations[$word]} ]]; then
            operation="${word}"
        fi
    done

    if [[ -z $operation ]]; then
        case $prev in
            --ciphers|--connect-timeout|-C|--continue-at|-F|--form|--form-string|\
            --ftp-account|--ftp-alternative-to-user|-P|--ftp-port|-H|--header|-h|\
            --help|--hostpubmd5|--keepalive-time|--krb|--limit-rate|--local-port|\
            --mail-from|--mail-rcpt|--max-filesize|--max-redirs|-m|--max-time|\
            --pass|--proto|--proto-redir|--proxy-user|--proxy1.0|-Q|--quote|-r|\
            --range|-X|--request|--retry|--retry-delay|--retry-max-time|\
            --socks5-gssapi-service|-t|--telnet-option|--tftp-blksize|-z|\
            --time-cond|--url|-u|--user|-A|--user-agent|-V|--version|-w|\
            --write-out|--resolve|--tlsuser|--tlspassword|--about)
                return
                ;;
            -K|--config|-b|--cookie|-c|--cookie-jar|-D|--dump-header|--egd-file|\
            --key|--libcurl|-o|--output|--random-file|-T|--upload-file|--trace|\
            --trace-ascii|--netrc-file)
                _filedir
                return
                ;;
            --cacert|-E|--cert)
                _filedir '@(c?(e)rt|cer|pem|der)'
                return
                ;;
            --capath)
                _filedir -d
                return
                ;;
            --cert-type|--key-type)
                COMPREPLY=( $( compgen -W 'DER PEM ENG' -- "$cur" ) )
                return
                ;;
            --crlfile)
                _filedir crl
                return
                ;;
            -d|--data|--data-ascii|--data-binary|--data-urlencode)
                if [[ $cur == \@* ]]; then
                    cur=${cur:1}
                    _filedir
                    COMPREPLY=( "${COMPREPLY[@]/#/@}" )
                fi
                return
                ;;
            --delegation)
                COMPREPLY=( $( compgen -W 'none policy always' -- "$cur" ) )
                return
                ;;
            --engine)
                COMPREPLY=( $( compgen -W 'list' -- "$cur" ) )
                return
                ;;
            --ftp-method)
                COMPREPLY=( $( compgen -W 'multicwd nocwd singlecwd' -- "$cur" ) )
                return
                ;;
            --ftp-ssl-ccc-mode)
                COMPREPLY=( $( compgen -W 'active passive' -- "$cur" ) )
                return
                ;;
            --interface)
                _available_interfaces -a
                return
                ;;
            -x|--proxy|--socks4|--socks4a|--socks5|--socks5-hostname)
                _known_hosts_real
                return
                ;;
            --pubkey)
                _filedir pub
                return
                ;;
            --stderr)
                COMPREPLY=( $( compgen -W '-' -- "$cur" ) )
                _filedir
                return
                ;;
            --tlsauthtype)
                COMPREPLY=( $( compgen -W 'SRP' -- "$cur" ) )
                return
                ;;
            --host)
                COMPREPLY=( $( compgen -W 'http:// https://' -- "$cur" ) )
                return
                ;;
            -ct|--content-type|-ac|--accept)
                COMPREPLY=( $( compgen -W '${!mime_type_abbreviations[*]}' -- "$cur" ) )
                return
                ;;
        esac
    fi

    #
    # Complete the server address based on ~/.ssh/known_hosts
    # and ~/.ssh/config
    #
    local prefix=${COMP_WORDS[COMP_CWORD-2]}
    local colon=${COMP_WORDS[COMP_CWORD-1]}
    if [[ "$colon" == ":" && ( $prefix == "https" || $prefix == "http" ) ]]; then
        COMPREPLY=()
        local comp_ssh_hosts=`[[ -f ~/.ssh/known_hosts ]] && \
                              ( cat ~/.ssh/known_hosts | \
                              grep '^[a-zA-Z0-9]' | \
                              cut -f 1 -d ' ' | \
                              sed -e s/,.*//g | \
                              grep -v ^# | \
                              uniq | \
                              grep -v "\[" ) ;
                              [[ -f ~/.ssh/config ]] && \
                              ( cat ~/.ssh/config | \
                              grep "^Host " | \
                              awk '{print $2}' )`
        COMPREPLY=( $( compgen -P '//' -W '${comp_ssh_hosts}' -- "${cur:2}") )
        return
    fi

    #
    # Complete the  and cURL's arguments
    #
    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$(_parse_help curl) $(_parse_help $1)' -- "$cur" ) )
        return
    fi

    #
    # If the argument starts with a letter this could be either an operation
    # or an operation parameter
    # When $cur is empty, suggest the list of operations by default
    #
    if [[ $cur =~ ^[A-Za-z_0-9]* ]]; then
        # If operation has not been yet selected, suggest the list of operations
        # otherwise suggest arguments of this operation as declared in the
        # OpenAPI specification
        if [[ -z $operation ]]; then
            COMPREPLY=( $(compgen -W '${!operations[*]}' -- ${cur}) )
        else
            COMPREPLY=( $(compgen -W '${operation_parameters[$operation]}' -- ${cur}) )
            compopt -o nospace
        fi
        return
    fi

} &&
complete -F _ 

# ex: ts=4 sw=4 et filetype=sh
